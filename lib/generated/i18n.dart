import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get actions_may_be_done_someday => "Actions that may be done someday";
  String get actions_to_perform_at_a_specific_time => "Actions to perform at a specific time";
  String get boxes => "Boxes";
  String get cancel => "Cancel";
  String get completed_tasks => "completed tasks";
  String get confirm_delete_box => "Do you really want to delete this box?";
  String get content => "Content";
  String get create_box => "Create box";
  String get deadline => "Deadline";
  String get done => "Done";
  String get event => "Event";
  String get inbox => "Inbox";
  String get inbox_for_tasks => "Inbox for tasks";
  String get next_actions => "Next actions";
  String get next_actions_to_perform => "Next actions to perform";
  String get one_day_maybe => "One day/ Maybe";
  String get project => "Project";
  String get projects => "Projects";
  String get reference => "Reference";
  String get references => "References";
  String get references_for_future_consultations => "References for future consultations";
  String get register => "Register";
  String get register_reference => "Register reference";
  String get register_task => "Register task";
  String get save => "Save";
  String get scheduled => "Scheduled";
  String get task => "Task";
  String get task_marked_completed => "Task Marked Completed";
  String get test => "Deadline";
  String get this_box_contains_your_personal_projects => "This box contains your personal projects.";
  String get title => "Title";
  String get update => "Update";
  String get waiting => "Waiting";
  String get waiting_for_others => "Waiting for others";
  String confirm_delete_task(String task) => "Do you really want to delete the task $task?";
  String error_cant_be_empty(String prefix) => "$prefix can't be empty";
  String files_x(String numberFiles) => "Files: $numberFiles";
  String this_box_contains(String numberFiles) => "This box contains $numberFiles files";
}

class $pt extends S {
  const $pt();

  @override
  TextDirection get textDirection => TextDirection.ltr;

}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("pt", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "pt":
          S.current = const $pt();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
